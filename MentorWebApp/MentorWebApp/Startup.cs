using MentorWebApp.Data;
using MentorWebApp.Models;
using MentorWebApp.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

/**
 * 
 * 
 * 
 * This startup configures the app. It is generated by .net and customized for our app
 * 
 * 
 */
namespace MentorWebApp
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));


            services.AddIdentity<ApplicationUser, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders()
                .AddRoleManager<RoleManager<IdentityRole>>();


            // Add application services.
            services.AddTransient<IEmailSender, EmailSender>();

            //adding policies for checking what the user roles are
            services.AddAuthorization(options =>
            {
                options.AddPolicy("MustBeAdmin",
                    policy => policy.RequireRole("Admin"));
                options.AddPolicy("Mentee",
                    policy => policy.RequireRole("Mentee", "Mentor", "Admin"));
                options.AddPolicy("Mentor",
                    policy => policy.RequireRole("Mentor", "Admin"));
            });


            services.AddMvc();


            //
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env,
            UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseBrowserLink();
                app.UseDatabaseErrorPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();

            app.UseAuthentication();

            //app.UseMiddleware<UserManager<ApplicationUser>>();
            //app.UseMiddleware<RoleManager<IdentityRole>>();

            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    "default",
                    "{controller=Home}/{action=Index}/{id?}");
            });

            // COMMENT THESE LINES OUT IF YOU GET A DATABASE ERROR
            RolesData.SeedRoles(app).Wait();
            ApplicationDbContextSeedData.Seed(app);
        }
    }
}